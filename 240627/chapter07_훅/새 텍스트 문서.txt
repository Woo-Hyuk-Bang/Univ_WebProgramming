리액트의 state, 생명주기 기능에 갈고리를 걸어
원하는 시점에 정해진 함수를 실해되도록 만든 함수.

특징
1. 모두 use로 시작
2. 커스텀 훅도 이름 앞에 use를 붙여서 사용

7-2. useState
state를 사용하기 위한 훅

7-3. useEffect
side effect를 수행하기 위한 훅
수동으로 DOM을 변경하는 등의 작업을 의미

7-4. useMemo
Memorized value를 리턴하는 훅
파라미터로는 Memorized value를 생성하는 create함수와 의존성 배열을 받는다.
useMemo()로 전달된 함수는 렌더링이 일어나는 동안 실행
렌더링이 일어나는 동안 실행 되어 선 안 될 작업을 useMemo에 넣으면 안된다.
useMemo 훅에 의존성 배열을 넣지 않는 건 의미가 없다.
의존성 배열을 넣게 되면 컴포넌트 마운트 시에만 함수가 실행된다.

7-5. useCallback
useMemo 훅과 유사한 역할
값이 아닌, 함수를 반환 -> usememo와 확연한 차이

Memoization : 최적화를 위한 사용.-> 비용이 높은 함수의 호출 결과를 저장,
같은 입력 값으로 함수를 호출하면 새로 함수를 호출하지 않고 이전에 저장해 놓은
호출 결과를 바로 변환

7-6. useRef
레퍼런스를 사용하기 위한 훅
특정 컴포넌트에 접근할 수 있는 객체
.current 속성은 현재 레퍼런스하고 있는 엘리먼트를 의미
반환된 레퍼런스 객체는 컴포넌트의 라이프타임 전체에 걸쳐 유지

callback ref
DOM node의 변화를 알기 위해 callback ref 사용하기
리액트 ref가 다른 node에 연결될 때마다 콜백 호출

훅의 규칙
1. 단순한 자바스크립트 함수
2. 무조건 함수 컴포넌트의 최상위 레벨에서만 호출
3. 반복문, 조건문, 중첩문에서 훅 호출은 불가능(내부적으로 사용 불가능)
4. 컴포넌트가 렌더링 될 때마다 매번 같은 순서로 호출되야함

커스텀 훅
여러 컴포넌트에서 반복적으로 사용되는 로직을 훅으로 만들어서 재사용하기 위함

나만의 훅 만들기
1. 만들어야 하는 상황?
2. 
3. 